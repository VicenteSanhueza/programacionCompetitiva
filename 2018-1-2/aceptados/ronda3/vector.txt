#include <vector>

//myVector.push_back(value) ==> adds an element to the END of the vector
//myVector.at(index) ==> return element specified index number
//myVector.size() ==> return number of elements
//myVector.begin() ==> return index first element
//myVector.insert(myVector.begin() + number, new value) ==> adds elements BEFORE specified index number
//myVector.erase(myVector.begin() + number) removes elements especified index 
//myVector.clear() ==> removes all elements in vector
//myVector.empty() ==> return boolean if vector is empty;

int main(){
	//vector<type> name;
	vector<int> myVector;
}
--------------------------------------------------------------------
--------------------------------------------------------------------

#include <map>

int main(){
	map<key,valor> name;
	/*ordena respecto a la key.
	map<key,valor>::iterator it;
	for(it=name.begin(); it != name.end() ;it++){
		cout<< it-> first() << it->second <<endl;
	}
}

it->fisrt, me entrega la clave, it->second el valor.

--------------------------------------------------------------------
--------------------------------------------------------------------
//a.compare(b) ==> si igual 0, a==b;
//a.size() ==> return size;

#include <string>

int main(){
	string a;
	string b;
	cin>>b;
	getline(cin,a);
}

--------------------------------------------------------------------
--------------------------------------------------------------------
BUSQUEDA EXAUSTIVA

#include <algorithm>

vector<algo> v;
do{
	printf(v);
}while(next_permutation(v.begin(),v.end()));

--------------------------------------------------------------------

void permutation(bool v[N], vector<int> arr){
	if(arr.size() == N){
		print(arr);
		return;
	}
	for(int i=1; i<=N ;i++){
		if(!v[i]){
			v[i]=true;
			arr.push_back(i);
			permutation(v,arr);
			v[i]=false;
			arr.pop_back();
		}
	}
}